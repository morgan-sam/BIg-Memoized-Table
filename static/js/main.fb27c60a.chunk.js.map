{"version":3,"sources":["components/Cell.jsx","style/spinner.js","components/Spinner.jsx","process/utility.js","process/users.js","style/table.js","components/Table.jsx","style/options.js","components/Options.jsx","style/console.js","components/Console.jsx","style/tutorial.js","components/Tutorial.jsx","style/app.js","components/App.jsx","index.js"],"names":["React","memo","props","cellKey","cellVal","entryIndex","toggleBooleanCell","toggleGenderCell","changeAgeCell","changeCellValue","console","log","booleanCell","cellStyle","cursor","textAlign","userSelect","className","style","onClick","loadingStyle","display","height","width","alignItems","justifyContent","border","fontSize","spinnerStyle","borderTop","borderRight","borderBottom","borderLeft","borderRadius","animation","Spinner","capitaliseEachWord","string","split","map","el","charAt","toUpperCase","slice","join","getUsers","num","a","fetch","raw","json","results","parseUsers","data","entry","i","index","firstname","name","first","lastname","last","gender","age","dob","address","location","street","number","postcode","country","email","phone","mobile","cell","active","Math","random","premium","getSingleValue","key","user","parsed","tableStyle","overflowX","overflowY","headings","Table","setData","memoization","loading","setLoading","useState","tableEntries","setTableEntries","nonMemoToggleCell","newData","JSON","parse","stringify","nonMemoToggleGenderCell","newGender","nonMemoChangeAgeCell","newAge","round","nonMemoChangeCellValue","newValue","memoToggleCell","useCallback","memoToggleGenderCell","memoChangeAgeCell","memoChangeCellValue","useEffect","entries","Object","value","Boolean","length","optionsStyle","flexDirection","infoStyle","padding","Options","setUsers","setMemoization","screenConsole","setScreenConsole","setMessages","setTutorialScreen","setUserCountResetConsole","backgroundColor","containerStyle","boxSizing","titleStyle","textDecoration","consoleStyle","margin","Console","messages","tutorialBoxStyle","position","top","left","transform","pageTextStyle","pageNumberStyle","closeButtonStyle","right","color","Tutorial","tutorialScreen","slides","title","text","Array","isArray","generateParagraphText","newPage","getAppStyle","gridTemplateColumns","gridTemplateRows","gap","originalConsole","window","App","addNewMessage","str","unparsed","users","localData","localStorage","getItem","setItem","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.fb27c60a.chunk.js","sourcesContent":["import React from 'react';\n\nconst Cell = (props) => {\n\tconst { cellKey, cellVal, entryIndex, toggleBooleanCell, toggleGenderCell, changeAgeCell, changeCellValue } = props;\n\tconsole.log(`Entry ${entryIndex}, ${cellKey} cell updated`);\n\tconst booleanCell = typeof cellVal === 'boolean';\n\n\tconst handleClick = () => {\n\t\tif (booleanCell) toggleBooleanCell(entryIndex, cellKey, cellVal);\n\t\telse if (cellKey === 'gender') toggleGenderCell(entryIndex, cellVal);\n\t\telse if (cellKey === 'age') changeAgeCell(entryIndex, cellVal);\n\t\telse if (cellKey !== 'index') changeCellValue(entryIndex, cellKey);\n\t};\n\n\tconst cellStyle = {\n\t\tcursor: cellKey !== 'index' ? 'pointer' : 'auto',\n\t\ttextAlign: booleanCell ? 'center' : 'left',\n\t\tuserSelect: 'none'\n\t};\n\n\treturn (\n\t\t<td className={`${cellKey} cell`} style={cellStyle} onClick={handleClick}>\n\t\t\t{booleanCell ? cellVal ? '✔' : '' : cellVal}\n\t\t</td>\n\t);\n};\n\nexport default React.memo(Cell);\n","export const loadingStyle = {\n\tdisplay: 'flex',\n\theight: '100%',\n\twidth: '100%',\n\talignItems: 'center',\n\tjustifyContent: 'center',\n\tborder: '1px solid black',\n\tfontSize: '2rem'\n};\n\nexport const spinnerStyle = {\n\theight: '3rem',\n\twidth: '3rem',\n\tborderTop: '10px solid #4287f5',\n\tborderRight: '10px solid #eee',\n\tborderBottom: '10px solid #eee',\n\tborderLeft: '10px solid #eee',\n\tborderRadius: '100%',\n\tanimation: 'spin 1s cubic-bezier(0,-0.04,.07,.82) infinite'\n};\n","import React from 'react';\nimport { loadingStyle, spinnerStyle } from 'style/spinner';\n\nconst Spinner = () => {\n\treturn (\n\t\t<div style={loadingStyle}>\n\t\t\t<div style={spinnerStyle} />\n\t\t</div>\n\t);\n};\n\nexport default Spinner;\n","export const capitaliseEachWord = (string) => {\n\tconst arr = string.split(' ');\n\tconst caps = arr.map((el) => el.charAt(0).toUpperCase() + el.slice(1));\n\treturn caps.join(' ');\n};\n","import { capitaliseEachWord } from 'process/utility';\n\nexport const getUsers = async (num) => {\n\tconst raw = await fetch(`https://randomuser.me/api/?results=${num}`);\n\tconst json = await raw.json();\n\treturn json.results;\n};\n\nexport const parseUsers = (data) => {\n\treturn data.map((entry, i) => {\n\t\treturn {\n\t\t\tindex: i,\n\t\t\tfirstname: entry.name.first,\n\t\t\tlastname: entry.name.last,\n\t\t\tgender: capitaliseEachWord(entry.gender),\n\t\t\tage: entry.dob.age,\n\t\t\taddress: `${entry.location.street.number} ${entry.location.street.name} ${entry.location.postcode}`,\n\t\t\tcountry: entry.location.country,\n\t\t\temail: entry.email,\n\t\t\tphone: entry.phone,\n\t\t\tmobile: entry.cell,\n\t\t\tactive: Math.random() > 0.5,\n\t\t\tpremium: Math.random() > 0.5\n\t\t};\n\t});\n};\n\nexport const getSingleValue = async (key) => {\n\tconst user = await getUsers(1);\n\tconst parsed = parseUsers(user);\n\treturn parsed[0][key];\n};\n","export const tableStyle = {\n\tdisplay: 'block',\n\theight: '100%',\n\twidth: '100%',\n\toverflowX: 'hidden',\n\toverflowY: 'scroll',\n\tborder: '1px solid black'\n};\n","import React, { useState, useEffect, useCallback } from 'react';\nimport Cell from 'components/Cell';\nimport Spinner from 'components/Spinner';\nimport { capitaliseEachWord } from 'process/utility';\nimport { getSingleValue } from 'process/users';\nimport { tableStyle } from 'style/table';\n\nconst headings = [\n\t'index',\n\t'first name',\n\t'last name',\n\t'gender',\n\t'age',\n\t'address',\n\t'country',\n\t'email',\n\t'phone',\n\t'mobile',\n\t'active',\n\t'premium'\n];\n\nconst Table = (props) => {\n\tconst { data, setData, memoization, loading, setLoading } = props;\n\tconst [ tableEntries, setTableEntries ] = useState([]);\n\n\t// Non-memoized Functions //\n\n\tconst nonMemoToggleCell = (entryIndex, cellKey, cellVal) => {\n\t\tlet newData = JSON.parse(JSON.stringify(data));\n\t\tnewData[entryIndex][cellKey] = !cellVal;\n\t\tsetData(newData);\n\t};\n\n\tconst nonMemoToggleGenderCell = (entryIndex, cellVal) => {\n\t\tlet newData = JSON.parse(JSON.stringify(data));\n\t\tconst newGender = cellVal === 'Male' ? 'Female' : 'Male';\n\t\tnewData[entryIndex]['gender'] = newGender;\n\t\tsetData(newData);\n\t};\n\n\tconst nonMemoChangeAgeCell = (entryIndex) => {\n\t\tlet newData = JSON.parse(JSON.stringify(data));\n\t\tconst newAge = Math.round(Math.random() * (99 - 18) + 18);\n\t\tnewData[entryIndex]['age'] = newAge;\n\t\tsetData(newData);\n\t};\n\n\tconst nonMemoChangeCellValue = async (entryIndex, cellKey) => {\n\t\tlet newData = JSON.parse(JSON.stringify(data));\n\t\tconst newValue = await getSingleValue(cellKey);\n\t\tnewData[entryIndex][cellKey] = newValue;\n\t\tsetData(newData);\n\t};\n\n\t// Memoized Functions //\n\n\tconst memoToggleCell = useCallback((entryIndex, cellKey, cellVal) => {\n\t\tsetData((data) => {\n\t\t\tlet newData = JSON.parse(JSON.stringify(data));\n\t\t\tnewData[entryIndex][cellKey] = !cellVal;\n\t\t\treturn newData;\n\t\t});\n\t}, []);\n\n\tconst memoToggleGenderCell = useCallback((entryIndex, cellVal) => {\n\t\tsetData((data) => {\n\t\t\tlet newData = JSON.parse(JSON.stringify(data));\n\t\t\tconst newGender = cellVal === 'Male' ? 'Female' : 'Male';\n\t\t\tnewData[entryIndex]['gender'] = newGender;\n\t\t\treturn newData;\n\t\t});\n\t}, []);\n\n\tconst memoChangeAgeCell = useCallback((entryIndex) => {\n\t\tsetData((data) => {\n\t\t\tlet newData = JSON.parse(JSON.stringify(data));\n\t\t\tconst newAge = Math.round(Math.random() * (99 - 18) + 18);\n\t\t\tnewData[entryIndex]['age'] = newAge;\n\t\t\treturn newData;\n\t\t});\n\t}, []);\n\n\tconst memoChangeCellValue = useCallback(async (entryIndex, cellKey) => {\n\t\tconst newValue = await getSingleValue(cellKey);\n\t\tsetData((data) => {\n\t\t\tlet newData = JSON.parse(JSON.stringify(data));\n\t\t\tnewData[entryIndex][cellKey] = newValue;\n\t\t\treturn newData;\n\t\t});\n\t}, []);\n\n\t////////////////////////\n\n\tuseEffect(\n\t\t() => {\n\t\t\tconst entries = data.map((entry, i) => {\n\t\t\t\treturn (\n\t\t\t\t\t<tr key={i}>\n\t\t\t\t\t\t{Object.entries(entry).map(([ key, value ], i) => (\n\t\t\t\t\t\t\t<Cell\n\t\t\t\t\t\t\t\ttoggleBooleanCell={memoization ? memoToggleCell : nonMemoToggleCell}\n\t\t\t\t\t\t\t\ttoggleGenderCell={memoization ? memoToggleGenderCell : nonMemoToggleGenderCell}\n\t\t\t\t\t\t\t\tchangeAgeCell={memoization ? memoChangeAgeCell : nonMemoChangeAgeCell}\n\t\t\t\t\t\t\t\tchangeCellValue={memoization ? memoChangeCellValue : nonMemoChangeCellValue}\n\t\t\t\t\t\t\t\tcellKey={key}\n\t\t\t\t\t\t\t\tcellVal={value}\n\t\t\t\t\t\t\t\tentryIndex={entry.index}\n\t\t\t\t\t\t\t\tkey={i}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t))}\n\t\t\t\t\t</tr>\n\t\t\t\t);\n\t\t\t});\n\t\t\tsetTableEntries(entries);\n\t\t},\n\t\t[ data, memoization ]\n\t);\n\n\tuseEffect(() => setLoading(false), [ tableEntries ]);\n\n\treturn loading ? (\n\t\t<Spinner />\n\t) : (\n\t\t<table style={tableStyle}>\n\t\t\t{Boolean(tableEntries.length) && (\n\t\t\t\t<thead>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t{headings.map((el, i) => (\n\t\t\t\t\t\t\t<th className={`${el} heading`} key={i}>\n\t\t\t\t\t\t\t\t{capitaliseEachWord(el)}\n\t\t\t\t\t\t\t</th>\n\t\t\t\t\t\t))}\n\t\t\t\t\t</tr>\n\t\t\t\t</thead>\n\t\t\t)}\n\t\t\t<tbody>{tableEntries}</tbody>\n\t\t</table>\n\t);\n};\n\nexport default Table;\n","export const optionsStyle = {\n\tdisplay: 'flex',\n\tflexDirection: 'row'\n};\n\nexport const infoStyle = {\n\tdisplay: 'flex',\n\talignItems: 'center',\n\tborder: '1px solid black',\n\tpadding: '1rem'\n};\n","import React from 'react';\nimport { optionsStyle, infoStyle } from 'style/options';\n\nconst Options = (props) => {\n\tconst {\n\t\tdata,\n\t\tsetUsers,\n\t\tmemoization,\n\t\tsetMemoization,\n\t\tscreenConsole,\n\t\tsetScreenConsole,\n\t\tsetMessages,\n\t\tsetTutorialScreen\n\t} = props;\n\n\tconst setUserCountResetConsole = (num) => {\n\t\tsetUsers(num);\n\t\tsetMessages([]);\n\t};\n\n\treturn (\n\t\t<div className={'options'} style={optionsStyle}>\n\t\t\t<div style={{ ...infoStyle, backgroundColor: memoization ? '#E5FFE5' : '#FFB2C5' }}>\n\t\t\t\tMemoization is {memoization ? 'On' : 'Off'}\n\t\t\t</div>\n\t\t\t<div style={infoStyle}>Number of Users: {data.length}</div>\n\t\t\t<button\n\t\t\t\tonClick={() => {\n\t\t\t\t\tsetMemoization(!memoization);\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\tTurn Memoization {memoization ? 'Off' : 'On'}\n\t\t\t</button>\n\t\t\t<button onClick={() => setUserCountResetConsole(20)}>20 Users</button>\n\t\t\t<button onClick={() => setUserCountResetConsole(100)}>100 Users</button>\n\t\t\t<button onClick={() => setUserCountResetConsole(1000)}>1000 Users</button>\n\t\t\t<button onClick={() => setScreenConsole(!screenConsole)}>\n\t\t\t\tUse {screenConsole ? 'Off' : 'On'}screen Console\n\t\t\t</button>\n\t\t\t<button style={{ backgroundColor: 'khaki' }} onClick={() => setTutorialScreen(1)}>\n\t\t\t\tTutorial\n\t\t\t</button>\n\t\t</div>\n\t);\n};\n\nexport default Options;\n","export const CONSOLE_WIDTH_REM = 20;\n\nexport const containerStyle = {\n\twidth: `${CONSOLE_WIDTH_REM}rem`,\n\theight: '100%',\n\tboxSizing: 'border-box',\n\toverflowX: 'hidden',\n\toverflowY: 'scroll',\n\tborder: '1px solid black'\n};\n\nexport const titleStyle = {\n\tfontSize: '1.2rem',\n\tpadding: '1rem',\n\ttextDecoration: 'underline'\n};\n\nexport const consoleStyle = {\n\tboxSizing: 'border-box',\n\twidth: 'inherit',\n\tmargin: '1rem'\n};\n","import React from 'react';\nimport { containerStyle, titleStyle, consoleStyle } from 'style/console';\n\nconst Console = (props) => {\n\tconst { messages } = props;\n\n\treturn (\n\t\t<div style={containerStyle}>\n\t\t\t<div style={titleStyle}>Console log ({messages.length}): </div>\n\t\t\t<div style={consoleStyle}> {messages.map((el, i) => <div key={i}>{el}</div>)}</div>\n\t\t</div>\n\t);\n};\n\nexport default Console;\n","export const tutorialBoxStyle = {\n\tposition: 'absolute',\n\ttop: '50%',\n\tleft: '50%',\n\ttransform: 'translate(-50%,-50%)',\n\tbackgroundColor: 'white',\n\tpadding: '2rem',\n\tborder: '1px solid black',\n\tdisplay: 'flex',\n\tjustifyContent: 'center',\n\talignItems: 'center',\n\tflexDirection: 'column',\n\tborderRadius: '1rem',\n\twidth: '30rem'\n};\n\nexport const pageTextStyle = {\n\tpadding: '1rem 2rem 2rem 2rem'\n};\n\nexport const pageNumberStyle = {\n\tpadding: '2rem'\n};\n\nexport const closeButtonStyle = {\n\tposition: 'absolute',\n\ttop: '1rem',\n\tright: '1rem',\n\theight: '1.5rem',\n\twidth: '1.5rem',\n\tdisplay: 'flex',\n\tjustifyContent: 'center',\n\talignItems: 'center',\n\tbackgroundColor: '#ff726f',\n\tborder: '1px solid #ddd',\n\tcolor: 'white'\n};\n","import React from 'react';\nimport { tutorialBoxStyle, pageTextStyle, pageNumberStyle, closeButtonStyle } from 'style/tutorial';\n\nconst Tutorial = (props) => {\n\tconst { tutorialScreen, setTutorialScreen } = props;\n\n\tconst slides = [\n\t\t{\n\t\t\ttitle: 'Tutorial Intro',\n\t\t\ttext: [\n\t\t\t\t`This webpage demonstrates the performance enhancement of memoizing large arrays of data.`,\n\t\t\t\t`It features an example database of user information using the randomuser.me API.`\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\ttitle: 'Editing Data',\n\t\t\ttext: [\n\t\t\t\t`Any data entry can be changed by simply clicking on the cell.`,\n\t\t\t\t`For example clicking a cell containing the value \"Male\" will change the value to \"Female\", clicking a name will change the value to another random name, etc.`\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\ttitle: 'Memoization Comparison',\n\t\t\ttext: [\n\t\t\t\t`As a cell value changes an update message will log to the console on the right.`,\n\t\t\t\t`Memoization is on by default. Turn it off with the button at the top. Now click another cell to update it's value.`,\n\t\t\t\t`You should see that every single cell on the table updated when using the non memoized function.`\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\ttitle: 'Large Data Sets',\n\t\t\ttext: [\n\t\t\t\t`With a small data set, the speed difference is neglible and so the unnecessary component rerenders are not a massive issue.`,\n\t\t\t\t`Change the size of the data set to a higher value (100 users/1000 users), and update a cell with memoization and without memoization for each.`,\n\t\t\t\t`With the larger sized tables the lag will become so significant it will cause the window to freeze for several seconds.`\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\ttitle: 'Tutorial End / Speed Testing',\n\t\t\ttext: [\n\t\t\t\t`Hopefully this demo helps to illustrate why memoization is extremely important for optimizing large data sets.`,\n\t\t\t\t`Note:`,\n\t\t\t\t` Two aspects of the demo will affect the speed of the cell changes. The reuse of the console.log statement for the on screen console, and the fact the API gets called when any of the string field cells are clicked.`,\n\t\t\t\t`For the most accurate speed test, set the app to use the off screen console and click either the Gender, Age, Active or Premium cells (all use offline functions).`\n\t\t\t]\n\t\t}\n\t];\n\n\tconst previousPage = () => {\n\t\tconst newPage = tutorialScreen - 1;\n\t\tif (newPage < 1) setTutorialScreen(slides.length);\n\t\telse setTutorialScreen(newPage);\n\t};\n\tconst nextPage = () => {\n\t\tconst newPage = tutorialScreen + 1;\n\t\tif (newPage > slides.length) setTutorialScreen(1);\n\t\telse setTutorialScreen(newPage);\n\t};\n\n\tconst generateParagraphText = () => {\n\t\tconst text = slides[tutorialScreen - 1].text;\n\t\tif (Array.isArray(text)) return text.map((text) => <p>{text}</p>);\n\t\telse return <p>{text}</p>;\n\t};\n\n\treturn (\n\t\t<div style={tutorialBoxStyle}>\n\t\t\t<h3>{slides[tutorialScreen - 1].title}</h3>\n\t\t\t<div style={pageTextStyle}>{generateParagraphText()}</div>\n\t\t\t<div>\n\t\t\t\t<button onClick={previousPage}>Previous</button>\n\t\t\t\t<span style={pageNumberStyle}>\n\t\t\t\t\tPage {tutorialScreen}/{slides.length}\n\t\t\t\t</span>\n\t\t\t\t<button onClick={nextPage}>Next</button>\n\t\t\t</div>\n\t\t\t<button style={closeButtonStyle} onClick={() => setTutorialScreen(0)}>\n\t\t\t\tX\n\t\t\t</button>\n\t\t</div>\n\t);\n};\n\nexport default Tutorial;\n","import { CONSOLE_WIDTH_REM } from 'style/console';\n\nexport const getAppStyle = (screenConsole) => {\n\treturn {\n\t\tdisplay: 'grid',\n\t\tgridTemplateColumns: screenConsole ? `1fr ${CONSOLE_WIDTH_REM}rem` : '1fr',\n\t\tgridTemplateRows: '2rem 1fr',\n\t\tgap: '1rem',\n\t\tboxSizing: 'border-box',\n\t\theight: '100vh',\n\t\twidth: '100vw',\n\t\tpadding: '3rem'\n\t};\n};\n","import React, { useState, useEffect } from 'react';\nimport Table from 'components/Table';\nimport Options from 'components/Options';\nimport Console from 'components/Console';\nimport Tutorial from 'components/Tutorial';\nimport { getUsers, parseUsers } from 'process/users';\nimport { getAppStyle } from 'style/app';\n\nconst originalConsole = window.console;\n\nconst App = () => {\n\tconst [ data, setData ] = useState([]);\n\tconst [ messages, setMessages ] = useState([]);\n\tconst [ memoization, setMemoization ] = useState([]);\n\tconst [ screenConsole, setScreenConsole ] = useState(true);\n\tconst [ loading, setLoading ] = useState(false);\n\tconst [ tutorialScreen, setTutorialScreen ] = useState(0);\n\n\tconst addNewMessage = React.useCallback((str) => {\n\t\tsetMessages((messages) => {\n\t\t\treturn [ str, ...messages ];\n\t\t});\n\t}, []);\n\n\tif (screenConsole)\n\t\twindow.console = {\n\t\t\t...window.console,\n\t\t\tlog: addNewMessage\n\t\t};\n\telse window.console = originalConsole;\n\n\tconst setUsers = async (num) => {\n\t\tsetData([]);\n\t\tconst unparsed = await getUsers(num);\n\t\tconst users = parseUsers(unparsed);\n\t\tsetData(users);\n\t};\n\n\tuseEffect(() => {\n\t\tsetData([]);\n\t\tconst localData = window.localStorage.getItem('memoDemoTableEntries');\n\t\tif (localData && localData.length) setData(JSON.parse(localData));\n\t\telse setUsers(20);\n\t\tsetLoading(false);\n\t}, []);\n\n\tuseEffect(() => setLoading(data.length === 0), [ data ]);\n\tuseEffect(() => (loading ? () => null : setMessages([])), [ loading ]);\n\tuseEffect(() => setLoading(true), [ memoization ]);\n\tuseEffect(() => setLoading(true), [ data.length ]);\n\n\tuseEffect(() => window.localStorage.setItem('memoDemoTableEntries', JSON.stringify(data)), [ data ]);\n\n\treturn (\n\t\t<div className=\"App\" style={getAppStyle(screenConsole)}>\n\t\t\t<Options\n\t\t\t\t{...{\n\t\t\t\t\tdata,\n\t\t\t\t\tsetUsers,\n\t\t\t\t\tmemoization,\n\t\t\t\t\tsetMemoization,\n\t\t\t\t\tscreenConsole,\n\t\t\t\t\tsetScreenConsole,\n\t\t\t\t\tsetMessages,\n\t\t\t\t\tsetTutorialScreen\n\t\t\t\t}}\n\t\t\t/>\n\t\t\t{screenConsole && <button onClick={() => setMessages([])}>Clear Console</button>}\n\t\t\t<Table {...{ data, setData, memoization, loading, setLoading, setMessages }} />\n\t\t\t{screenConsole && <Console {...{ messages }} />}\n\t\t\t{tutorialScreen > 0 && <Tutorial {...{ tutorialScreen, setTutorialScreen }} />}{' '}\n\t\t</div>\n\t);\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from 'components/App';\n\nimport 'css/index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}